#! /usr/bin/env bash 

executable_exists() {
    if command -v "$1" >/dev/null 2>&1; then
        return 0
    else
        echo "[INFO] Command '$1' could not be found"
        return 1
    fi
}

create_tmuxinator_config_panes() {
    local dump_file=${1}
    local services=${2}

    # Mind the leading whitespaces of the heredoc must be tab characters
    cat <<- EOF > "$dump_file"
		name: docker_compose_tmux
		on_project_start: 
		on_project_exit: 
		windows:
		  - main:
		      panes:
	EOF

    for service in $services; do
        echo "      - docker compose up --remove-orphans $service" >> "$dump_file"
    done
}

create_tmuxinator_config_windows() {
    local dump_file=${1}
    local services=${2}

    cat <<- EOF > "$dump_file"
		name: docker_compose_tmux
		on_project_start: 
		on_project_exit: 
		windows:
	EOF

    for service in $services; do
        {
            echo "  - $service:                                       " 
            echo "      panes:                                        "
            echo "      - docker compose up --remove-orphans $service "
        } >> "$dump_file"
    done
}

print_usage() {
    local source=${BASH_SOURCE[0]}
    local indent=$(printf "%*s" ${#source})   # Adjust the padding to align text nicely

    echo "Usage: ${source}                                                                            "
    echo "       ${indent} [  -w | --windows            ] : use tmux windows rather than panes        "
    echo "       ${indent} [ -dr | --dry-run            ] : display generated tmux config and exit    "
    echo "       ${indent} [ -ns | --no-kill-session    ] : don't kill tmux session after detach      "
    echo "       ${indent} [ -nc | --no-kill-containers ] : don't kill docker containers after detach "
    echo "       ${indent} [  -d | --debug              ] : display additional hints at runtime       "
    echo "       ${indent} [  -h | --help               ] : display this help and exit                "
    echo "                                                                                            "
    echo "Launches all services in a docker compose file, each on its own tmux pane.                  "
}

main() {

    if ! executable_exists 'tmux' || ! executable_exists 'tmuxinator'; then
        echo "[ERROR] Missing dependencies: apt install tmux tmuxinator" >&2
        exit 1
    fi

    local arg__windows=false
    local arg__dry_run=false
    local arg__no_kill_session=false
    local arg__no_kill_containers=false
    local arg__debug=false

    local tmuxinator_config_function
    local tmuxinator_config_file
    local services

    while ((${#}))
    do
        local arg="${1:-}"
        case "${arg}" in
            -w|--windows)
                arg__windows=true
                ;;
            -dr|--dry-run)
                arg__dry_run=true
                ;;
            -ns|--no-kill-session)
                arg__no_kill_session=true
                ;;
            -nc|--no-kill-containers)
                arg__no_kill_containers=true
                ;;
            -d|--debug)
                arg__debug=true
                ;;
            -h|--help)
                print_usage
                exit 0
                ;;
            *)
                print_usage
                exit 1
                ;;
        esac
        shift
    done

    ${arg__debug} && echo "[DEBUG] --windows: $arg__windows.                       " >&2
    ${arg__debug} && echo "[DEBUG] --dry-run: $arg__dry_run.                       " >&2
    ${arg__debug} && echo "[DEBUG] --no-kill-session: $arg__no_kill_session.       " >&2
    ${arg__debug} && echo "[DEBUG] --no-kill-containers: $arg__no_kill_containers. " >&2


    # Parse docker compose file and sort for consistent order
    services=$(docker compose config --services | sort)
    if [ -z "$services" ]; then 
        echo "[ERROR] Could not parse docker services. Is there a compose file?" >&2
        exit 1
    fi

    # Decide whether to distribute services in windows or panes
    if ${arg__windows}; then
        tmuxinator_config_function=create_tmuxinator_config_windows
    else
        tmuxinator_config_function=create_tmuxinator_config_panes
    fi

    # Print and early quit if dry run mode (argument)
    if ${arg__dry_run} ; then
        ${tmuxinator_config_function} /dev/stdout "$services"
        exit 0
    fi 


    # Build tmuxinator config file
    tmuxinator_config_file=$(mktemp)
    ${tmuxinator_config_function} "$tmuxinator_config_file" "$services"

    # Show the config file if debugging
    ${arg__debug} && echo "[DEBUG] Generated config for tmux:"                  >&2 \
                  && echo "[DEBUG] >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> " >&2 \
                  && cat  "$tmuxinator_config_file"                             >&2 \
                  && echo "[DEBUG] <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< " >&2 \
                  && read -rp "Press RETURN to continue"                        >&2 ;


    # Run and attach to the tmux session
    tmuxinator start -p "$tmuxinator_config_file"


    # Cleanup tmux session
    if ${arg__no_kill_session} ; then
        echo "[INFO] Skipping tmux kill, session (and containers) still alive." >&2
    else
        tmux kill-session && echo "[INFO] Killed tmux session." >&2

        # Cleanup containers
        # Only makes sense if session killed
        if ${arg__no_kill_containers};  then
            echo "[INFO] Skipping docker kill, containers still alive." >&2
        else
            if docker compose kill; then
                echo "[INFO] Killed docker containers." >&2
            else
                echo "[INFO] Apparent failure when killing containers." >&2
                set -x
                sleep 3
                docker container list
            fi
        fi 
    fi 


}
main "$@"
